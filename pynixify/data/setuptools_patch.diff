diff --git a/setuptools/__init__.py b/setuptools/__init__.py
index 89f6f06e..2d772eed 100644
--- a/setuptools/__init__.py
+++ b/setuptools/__init__.py
@@ -76,36 +76,65 @@ def _install_setup_requires(attrs):

     # Honor setup.cfg's options.
     dist.parse_config_files(ignore_option_errors=True)
-    if dist.setup_requires:
-        _fetch_build_eggs(dist)
-
-
-def _fetch_build_eggs(dist):
-    try:
-        dist.fetch_build_eggs(dist.setup_requires)
-    except Exception as ex:
-        msg = """
-        It is possible a package already installed in your system
-        contains an version that is invalid according to PEP 440.
-        You can try `pip install --use-pep517` as a workaround for this problem,
-        or rely on a new virtual environment.
-
-        If the problem refers to a package that is not installed yet,
-        please contact that package's maintainers or distributors.
-        """
-        if "InvalidVersion" in ex.__class__.__name__:
-            if hasattr(ex, "add_note"):
-                ex.add_note(msg)  # PEP 678
-            else:
-                dist.announce(f"\n{msg}\n")
-        raise
-
-
-def setup(**attrs):
+    if 'PYNIXIFY' in os.environ:
+        from pathlib import Path
+        try:
+            out = Path(os.environ['out'])
+        except KeyError:
+            print("out environment variable not defined")
+            sys.exit(1)
+        setup_requires = dist.setup_requires
+
+        def norm_list_of_string(l):
+            # Most setup() arguments take either a string or a list of strings.
+            # Normalize this to a list of strings.
+            if isinstance(l, str):
+                return [l]
+            return l
+
+        install_requires = attrs.get('install_requires', dist.install_requires)
+        install_requires = list(norm_list_of_string(install_requires))
+
+        # Handle something like this:
+        # extras_require={
+        #     ':sys.platform == "darwin"': ['macfsevents'],
+        #     ':sys.platform == "linux"': ['pyinotify'],
+        # },
+        for (key, reqs) in attrs.get('extras_require', {}).items():
+            if not key.startswith(':'):
+                continue
+            marker = key[1:]
+            for req in norm_list_of_string(reqs):
+                install_requires.append(f'{req}; {marker}')
+
+        targets = [
+            ('setup_requires.txt', attrs.get('setup_requires', setup_requires)),
+            ('install_requires.txt', install_requires),
+            ('tests_requires.txt', attrs.get('tests_require', [])),
+        ]
+        for (filename, requirements) in targets:
+            with (out / filename).open("w") as fp:
+                fp.write('\n'.join(norm_list_of_string(requirements)))
+
+        import json
+        meta = {}
+        meta_attrs = {'description', 'url', 'license', 'version'}
+        for meta_attr in meta_attrs:
+            meta[meta_attr] = attrs.get(meta_attr)
+        meta['_fmt'] = 'setuptools'
+        with (out / 'meta.json').open('w') as fp:
+            json.dump(meta, fp)
+    else:
+        if dist.setup_requires:
+            dist.fetch_build_eggs(dist.setup_requires)
+
+
+def setup( **attrs):
     # Make sure we have any requirements needed to interpret 'attrs'.
     logging.configure()
     _install_setup_requires(attrs)
-    return distutils.core.setup(**attrs)
+    if 'PYNIXIFY' not in os.environ:
+        return distutils.core.setup(**attrs)


 setup.__doc__ = distutils.core.setup.__doc__
